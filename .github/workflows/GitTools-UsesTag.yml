# Uses action: https://github.com/marketplace/actions/gittools
# Must include 'fetch-depth: 0' in checkout step to get all tags for it to determine the previous version.
# Does not use the branch name in PRs; uses 'PullRequest<PR#>' instead. e.g. PullRequest0009.
# A lot of different version parts and formats outputted that are available to choose from.
name: GitTools-UsesTag

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the whole repo history.

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine the version
        id: version
        uses: gittools/actions/gitversion/execute@v0

      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.version.outputs.major }}"
          echo "Minor: ${{ steps.version.outputs.minor }}"
          echo "Patch: ${{ steps.version.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.version.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.version.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.version.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.version.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.version.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.version.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.version.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.version.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.version.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.version.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.version.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.version.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.version.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.version.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.version.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.version.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.version.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.version.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.version.outputs.sha }}"
          echo "ShortSha: ${{ steps.version.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.version.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.version.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.version.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.version.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.version.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.version.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.version.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.version.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.version.outputs.commitDate }}"

      # - name: Set the new version tag
      #   # Only run this step if we are doing a push (not a PR) to the default branch (e.g. main).
      #   if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      #   run: |
      #     git tag ${{ steps.version.outputs.version }}
      #     git push origin ${{ steps.version.outputs.version }}
